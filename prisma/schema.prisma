generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum AuthProviderType {
  PASSKEYS
  EMAIL_N_PASSWORD
  GOOGLE
  FACEBOOK
  X
  APPLE
}

enum UserDetailsPrivacySetting {
  NAME
  EMAIL
  PHONE
  PICTURE
}

enum NotificationSetting {
  NONE
  SECURITY
  ALL
}

enum FilterPrivacySetting {
  INCLUDE_DETAILS
  HIDE_DETAILS
}

enum BillType {
  MONTHLY
  YEARLY
}

enum Chain {
  ARWEAVE
  ETHEREUM
}

enum WalletStatus {
  /// The wallet can be activated and used normally.
  ENABLED

  /// The wallet cannot be activated without first changing its status to ENABLED, but shares stay in the DB. They can
  /// also be used for account recovery if they are not PRIVATE.
  DISABLED

  /// READONLY wallets don't have shares stored in the DB (when changing the walletStatus to READONLY, they'll be
  /// deleted, if they existed).
  READONLY

  /// LOST wallets don't have shares stored in the DB (when changing the walletStatus to LOST, they'll be deleted, if
  /// they existed).
  LOST
}

enum WalletPrivacySetting {
  /// Only the last 4 characters of `address` are stored. `publicKey` is not stored.
  PRIVATE
  /// The whole `address` and `publicKey` are stored.
  PUBLIC
}

enum WalletIdentifierType {
  ALIAS
  ANS
  PNS
}

enum WalletSourceType {
  IMPORTED
  GENERATED
}

enum WalletSourceFrom {
  SEEDPHRASE
  KEYFILE
  BINARY
}

enum WalletUsageStatus {
  SUCCESSFUL
  FAILED
}

enum ExportType {
  SEEDPHRASE
  KEYFILE
}

enum ChallengeType {
  HASH
  SIGNATURE
}

enum ChallengePurpose {
  ACTIVATION
  SHARE_RECOVERY
  SHARE_ROTATION
  ACCOUNT_RECOVERY
}

// TODO: Document index usages.

/**
 * model AuthMethod {
 * id            String           @id @default(uuid()) @db.Uuid
 * /// Auth providers typically create a new "user" for each different authentication method, so we keep its ID here.
 * /// This is typically stored in the `sub` property of an ID Token (e.g. Auth0).
 * providerId    String           @db.VarChar(255)
 * providerType  AuthProviderType
 * /// This can be an email for EMAIL, a profile handler for social networks or some kind of device ID for passkeys.
 * providerLabel String           @db.VarChar(255)
 * linkedAt      DateTime         @default(now())
 * lastUsedAt    DateTime         @default(now())
 * unlinkedAt    DateTime?
 * user                   User                    @relation(fields: [userId], references: [supId], onDelete: Cascade)
 * userId                 String
 * authenticationAttempts AuthenticationAttempt[]
 * @@unique([userId, providerId], name: "userAuthentication")
 * @@map("AuthMethods")
 * }
 */

/// UserProfiles are created/updated automatically using users are inserted/updated on auth.users, but some other fields
/// such as the user preferences (except for `ipFilterSetting` and `countryFilterSetting`, which are easier to use when
/// stored in `auth.users.user_metadata`), or some extra fields like `recoveredAt`.
/// Having this entity also makes it easier to delete other entities in cascade when a user is deleted.
model UserProfile {
  // Fields synced automatically from `auth.users`:

  supId    String  @id @default(uuid()) @db.Uuid
  supEmail String? @db.VarChar(255)
  supPhone String? @db.VarChar(255)

  // Custom fields:
  // `name`, `email`, `phone` and `picture` initially come from `auth.users`.

  name        String?   @db.VarChar(100)
  email       String?   @db.VarChar(255)
  phone       String?   @db.VarChar(255)
  picture     String?   @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  recoveredAt DateTime?

  // Settings:

  /// If this account is recovered, what user details can we show to help users identify it's the right account:
  userDetailsRecoveryPrivacy     UserDetailsPrivacySetting[]
  /// Receive email notifications for these types of notifications.
  notificationsSetting           NotificationSetting         @default(SECURITY)
  /// Require 1 or more wallet signatures to recover this account.
  recoveryWalletsRequiredSetting Int                         @default(1)
  /// Only allow requests from these IPs.
  // TODO: This field should be duplicated in `user_metadata` to avoid making one more DB query if not needed.
  // ipFilterSetting                String[]                    @db.VarChar(45)
  /// If a request is rejected due to ipFilterSetting, include or hide the details in the error.
  ipPrivacyFilterSetting         FilterPrivacySetting?       @default(HIDE_DETAILS)
  /// Only allow requests from these countries (based in IP). Countries will be stored as ISO 3166-1 alpha-2 codes, as returned by CloudFare
  /// (see https://cloudflare.com/cdn-cgi/trace).
  // TODO: This field should be duplicated in `user_metadata` to avoid making one more DB query if not needed.
  // countryFilterSetting           String[]                    @db.VarChar(2)
  /// If a request is rejected due to countryFilterSetting, include or hide the details in the error.
  countryPrivacySetting          FilterPrivacySetting?       @default(HIDE_DETAILS)

  developer              Developer?
  // authMethods            AuthMethod[]
  wallets                Wallet[]
  walletActivations      WalletActivation[]
  walletRecoveries       WalletRecovery[]
  walletExports          WalletExport[]
  workKeyShares          WorkKeyShare[]
  recoveryKeyShares      RecoveryKeyShare[]
  challenges             Challenge[]
  devicesAndLocations    DeviceAndLocation[]
  sessions               Session[]
  authenticationAttempts AuthenticationAttempt[]

  @@map("UserProfiles")
}

model Developer {
  id            String   @id @default(uuid()) @db.Uuid
  plan          String   @default("free") @db.VarChar(50)
  planStartedAt String   @default("free") @db.VarChar(50)
  apiKey        String   @unique @db.VarChar(255)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()

  // Billing Information:
  name        String?
  taxId       String?
  address     String?
  /// ISO 3166-1 alpha-2 code
  countryCode String? @db.VarChar(2)

  applications Application[]
  bills        Bill[]

  UserProfile UserProfile @relation(fields: [userId], references: [supId], onDelete: Cascade)
  userId      String      @unique @db.Uuid

  @@index([apiKey])
  @@map("Developers")
}

model Bill {
  id              String   @id @default(uuid()) @db.Uuid
  type            BillType
  createdAt       DateTime @default(now())
  /// Discount %, [0, 1) range.
  discount        Float
  /// Total, including VAT.
  total           Float
  /// Vat %, [0, 1) range.
  vat             Float
  /// Only applicable to monthly bills:
  monthlySessions Int

  /// Custom details we might need to the invoices (TODO: TBD).
  details Json

  /// The user can manually override some details on each invoice:
  /// {
  ///   name: string;
  ///   taxId: string;
  ///   address: string;
  ///   countryCode: string;
  /// }
  userOverrides Json

  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String    @db.Uuid

  @@index([developerId])
  @@map("Bills")
}

model Application {
  id          String   @id @default(uuid()) @db.Uuid
  description String?  @db.VarChar(255)
  domains     String[] @db.VarChar(255) // TODO: Consider separating domains to add tags/label to them (e.g. staging, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  /// Different customization options developers can set in their apps:
  // TODO: Document its shape once defined.
  settings Json

  DeviceAndLocation DeviceAndLocation[]
  Session           Session[]

  // TODO: We might want to change this so that Applications can be shared to more than one Developer? But probably
  // later, and consider adding teams at that point. Or replace Developer with Team.
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String    @db.Uuid

  @@index([developerId])
  @@map("Applications")
}

model Wallet {
  id        String       @id @default(uuid()) @db.Uuid
  /// This must be set to READONLY if publicKey is not set.
  status    WalletStatus @default(ENABLED)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt()
  chain     Chain
  address   String       @db.VarChar(255)
  /// Can (not must) be empty for READONLY wallets. B64 string. 1024 just to be safe (e.g. Arweave wallet.owner = 683 characters).
  publicKey String?      @db.VarChar(1024)

  // Settings:

  /// Preferred way to visually present this wallet.
  identifierTypeSetting          WalletIdentifierType @default(ALIAS)
  /// Custom name/alias the user can attach to this wallet.
  aliasSetting                   String?              @db.VarChar(64)
  /// Custom description/note the user can attach to this wallet.
  descriptionSetting             String?              @db.VarChar(500)
  /// Custom tags the user can attach to this wallet.
  tagsSetting                    String[]             @db.VarChar(32)
  /// New wallets will prompt the user to backup/export it, but users can disable these reminders (per wallet).
  doNotAskAgainSetting           Boolean              @default(false)
  /// Send the address, only last 4 characters of the address or no address at all when wallets are retrieved.
  walletPrivacySetting           WalletPrivacySetting @default(PUBLIC)
  /// Users will be able to disable wallets as recovery options. This must be set to false if publicKey is not set.
  canRecoverAccountSetting       Boolean              @default(false)
  /// Set to true after the user has exported a seedphrase, private key or recovery file.
  canBeRecovered                 Boolean              @default(false)
  /// Require 1 or more authentication tokens to activate this wallet.
  activationAuthsRequiredSetting Int                  @default(0)
  /// Require 1 or more authentication tokens to backup this wallet (get a recovery share).
  backupAuthsRequiredSetting     Int                  @default(0)
  /// Require 1 or more authentication tokens to recover this wallet.
  recoveryAuthsRequiredSetting   Int                  @default(0)

  /// Includes cached information about how to identify this wallet:
  ///
  /// {
  ///   ens: string;
  ///   ensResolution: any;
  ///   ans: string;
  ///   ansResolution: any;
  ///   pns: string;
  ///   pnsResolution: any;
  ///   ...
  ///   etc. (for other chains)
  /// }
  info Json?

  /// Information about the origin/source of this wallet:
  /// {
  ///   type "imported" | "generated",
  ///   from: "seedphrase" | "keyfile" | "binary"
  /// }
  source Json?

  // Stats:
  lastActivatedAt  DateTime? // Can be computed from `WalletActivation`
  lastBackedUpAt   DateTime? // Can be computed from `RecoveryKeyShare`
  lastRecoveredAt  DateTime? // Can be computed from `WalletRecovery`
  lastExportedAt   DateTime? // Can be computed from `WalletExport`
  totalActivations Int       @default(0) // Can be computed from `WalletActivation`
  totalBackups     Int       @default(0) // Can be computed from `RecoveryKeyShare`
  totalRecoveries  Int       @default(0) // Can be computed from `WalletRecovery`
  totalExports     Int       @default(0) // Can be computed from `WalletExport`

  walletActivations WalletActivation[]
  walletRecoveries  WalletRecovery[]
  walletExports     WalletExport[]
  workKeyShares     WorkKeyShare[]
  recoveryKeyShares RecoveryKeyShare[]
  challenges        Challenge[]

  UserProfile UserProfile @relation(fields: [userId], references: [supId], onDelete: Cascade)
  userId      String      @db.Uuid

  deviceAndLocation   DeviceAndLocation @relation(fields: [deviceAndLocationId], references: [id], onDelete: Cascade)
  deviceAndLocationId String            @db.Uuid

  @@unique([userId, chain, address], name: "userWallet")
  @@index([canRecoverAccountSetting, chain, address])
  @@map("Wallets")
}

model WalletActivation {
  id          String            @id @default(uuid()) @db.Uuid
  status      WalletUsageStatus
  activatedAt DateTime          @default(now())

  UserProfile UserProfile @relation(fields: [userId], references: [supId], onDelete: Cascade)
  userId      String      @db.Uuid

  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId String @db.Uuid

  workKeyShare   WorkKeyShare? @relation(fields: [workKeyShareId], references: [id], onDelete: Cascade)
  workKeyShareId String?       @db.Uuid

  deviceAndLocation   DeviceAndLocation @relation(fields: [deviceAndLocationId], references: [id], onDelete: Cascade)
  deviceAndLocationId String            @db.Uuid

  @@index([userId])
  @@index([activatedAt])
  @@map("WalletActivations")
}

model WalletRecovery {
  id          String            @id @default(uuid()) @db.Uuid
  status      WalletUsageStatus
  recoveredAt DateTime          @default(now())

  UserProfile UserProfile @relation(fields: [userId], references: [supId], onDelete: Cascade)
  userId      String      @db.Uuid

  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId String @db.Uuid

  recoveryKeyShare   RecoveryKeyShare? @relation(fields: [recoveryKeyShareId], references: [id], onDelete: Cascade)
  recoveryKeyShareId String?           @db.Uuid

  deviceAndLocation   DeviceAndLocation @relation(fields: [deviceAndLocationId], references: [id], onDelete: Cascade)
  deviceAndLocationId String            @db.Uuid

  @@index([userId])
  @@index([recoveredAt])
  @@map("WalletRecoveries")
}

model WalletExport {
  id         String     @id @default(uuid()) @db.Uuid
  type       ExportType
  exportedAt DateTime   @default(now())

  UserProfile UserProfile @relation(fields: [userId], references: [supId], onDelete: Cascade)
  userId      String      @db.Uuid

  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId String @db.Uuid

  deviceAndLocation   DeviceAndLocation @relation(fields: [deviceAndLocationId], references: [id], onDelete: Cascade)
  deviceAndLocationId String            @db.Uuid

  @@index([userId])
  @@index([exportedAt])
  @@map("WalletExports")
}

/// WorkKeyShares are used to regularly reconstruct users' private keys on a specific device by combining them with their deviceShare, and are rotated
/// regularly. This means a WorkKeyShare is linked to a specific deviceNonce, userId and walletId, and optionally to a Session (optionally because the session
/// might be closed, but the deviceNonce and deviceShare stay on the device).
model WorkKeyShare {
  id               String   @id @default(uuid()) @db.Uuid
  createdAt        DateTime @default(now())
  sharesRotatedAt  DateTime @default(now())
  rotationWarnings Int      @default(0)

  /// Yes, Arweave private keys are humongous, 3168 characters as base64, so 4096 just to be safe.
  authShare            String @db.VarChar(4096)
  /// SHA-256 hash => 32 bytes signature => 20 characters in base64
  deviceShareHash      String @db.VarChar(20)
  /// RSA-PSS with a 4096 modulusLength => 550 bytes public key as SPKI => 736 characters in base64. 1024 just to be safe.
  deviceSharePublicKey String @db.VarChar(1024)

  walletActivations WalletActivation[]

  UserProfile UserProfile @relation(fields: [userId], references: [supId], onDelete: Cascade)
  userId      String      @db.Uuid

  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId String @db.Uuid

  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String  @db.Uuid

  /// This unique constraint means that if the users loses the deviceShare but, for whatever reason, not the
  /// device nonce, after requesting the recoveryAuthShare and sending the new authShare and deviceShareHash, this will
  /// replace the previous one (as deviceNonce is the same):
  @@unique([userId, sessionId, walletId], name: "userSessionWorkShare")
  @@map("WorkKeyShares")
}

/// RecoveryKeyShares are rarely/occasionally used to reconstruct users' private keys on any device by combining them with their recoveryBackupShare (downloaded
/// as a file), and are not rotated.
model RecoveryKeyShare {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())

  /// Yes, Arweave private keys are humongous, 3168 characters as base64, so 4096 just to be safe.
  recoveryAuthShare            String
  /// SHA-256 hash => 32 bytes signature => 20 characters in base64
  recoveryBackupShareHash      String @db.VarChar(20)
  /// RSA-PSS with a 4096 modulusLength => 550 bytes public key as SPKI => 736 characters in base64. 1024 just to be safe.
  recoveryBackupSharePublicKey String @db.VarChar(1024)

  walletRecoveries WalletRecovery[]

  UserProfile UserProfile @relation(fields: [userId], references: [supId], onDelete: Cascade)
  userId      String      @db.Uuid

  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId String @db.Uuid

  deviceAndLocation   DeviceAndLocation @relation(fields: [deviceAndLocationId], references: [id], onDelete: Cascade)
  deviceAndLocationId String            @db.Uuid

  @@unique([userId, recoveryBackupShareHash])
  @@index([userId, createdAt])
  @@map("RecoveryKeyShares")
}

/// See `challenge.utils.ts` and `challenge-client-v1.ts` for details on how the challenges are generated and validated.
model Challenge {
  id        String           @id @default(uuid()) @db.Uuid
  type      ChallengeType
  purpose   ChallengePurpose
  /// We use a 128 byte buffer, which translates to 172 characters in base64, so 255 to be safe.
  value     String           @db.VarChar(255)
  version   String           @db.VarChar(50)
  createdAt DateTime         @default(now())

  UserProfile UserProfile @relation(fields: [userId], references: [supId], onDelete: Cascade)
  userId      String      @db.Uuid

  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId String @db.Uuid

  /// Each user would have up to 4 challenges active at a time (one of each type). Those of the same type will be
  /// overridden.
  @@unique([userId, purpose], name: "userChallenges")
  @@map("Challenges")
}

/// Used in `generateFetchRecoverableAccountsChallenge()`
model AnonChallenge {
  id        String   @id @default(uuid()) @db.Uuid
  value     String   @db.VarChar(255)
  version   String   @db.VarChar(50)
  createdAt DateTime @default(now())
  chain     Chain
  address   String   @db.VarChar(255)

  @@map("AnonChallenges")
}

/// A DeviceAndLocation item tells us where did a specific event (the entity this item is linked to) happened. The unique constraint on
/// userId-deviceNonce-ip-userAgent is used to make sure we reuse DeviceAndLocation rows when nothing has changed. Note this entity is not meant to be updated
/// when any of those fields change (in contrast to `Session`).
model DeviceAndLocation {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  deviceNonce String   @db.VarChar(255)
  /// IPv6 or IPv4-mapped address
  ip          String   @db.Inet
  /// ISO 3166-1 alpha-2 code
  countryCode String   @db.VarChar(2)
  userAgent   String

  wallets                Wallet[]
  walletActivations      WalletActivation[]
  walletRecoveries       WalletRecovery[]
  walletExports          WalletExport[]
  recoveryKeyShares      RecoveryKeyShare[]
  authenticationAttempts AuthenticationAttempt[]

  UserProfile UserProfile? @relation(fields: [userId], references: [supId], onDelete: Cascade)
  userId      String?      @db.Uuid

  application   Application? @relation(fields: [applicationId], references: [id], onDelete: SetNull)
  applicationId String?      @db.Uuid

  @@unique([userId, deviceNonce, ip, userAgent], name: "userDevice")
  @@index([createdAt])
  @@map("DevicesAndLocations")
}

/// Sessions are created/updated automatically using sessions are inserted/updated on auth.sessions.
/// A Session represents an active session. The unique constraint on userId-deviceNonce makes sure we only have one session on a given device, and forces as to
/// maintain ip and userAgent updated.
model Session {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  deviceNonce String   @default("") @db.VarChar(255)
  // IPv6 or IPv4-mapped address
  ip          String   @db.Inet
  /// ISO 3166-1 alpha-2 code
  countryCode String   @default("") @db.VarChar(2)
  userAgent   String   @db.VarChar(500)

  applications  Application[]
  workKeyShares WorkKeyShare[]

  UserProfile UserProfile @relation(fields: [userId], references: [supId], onDelete: Cascade)
  userId      String      @db.Uuid

  /// Note how here we don't include ip and userAgent, as we only want to keep one session per user-device, so if the IP
  /// or the userAgent change on the same device, we simply update the session info.
  @@unique([userId, deviceNonce], name: "userSession")
  @@index([updatedAt])
  @@map("Sessions")
}

model AuthenticationAttempt {
  id              String   @id @default(uuid()) @db.Uuid
  rejectionReason String   @db.VarChar(255)
  createdAt       DateTime @default(now())

  /// No supIdentity here as this is a reference to auth.users
  supIdentityId String?

  UserProfile UserProfile @relation(fields: [userId], references: [supId], onDelete: Cascade)
  userId      String      @db.Uuid

  // authMethod   AuthMethod? @relation(fields: [authMethodId], references: [id], onDelete: SetNull)
  // authMethodId String?

  deviceAndLocation   DeviceAndLocation @relation(fields: [deviceAndLocationId], references: [id], onDelete: Cascade)
  deviceAndLocationId String            @db.Uuid

  @@index([userId])
  @@index([createdAt])
  @@map("LoginAttempts")
}
